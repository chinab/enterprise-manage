<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:ro="com.artogrid.accountsystem.ro.*" width="900" height="400">
	<fx:Script>
		<![CDATA[
			import com.artogrid.accountsystem.bl.InitData;
			import com.artogrid.accountsystem.controls.MyAlert;
			import com.artogrid.accountsystem.events.AccountDataEvent;
			import com.artogrid.accountsystem.ro.AccountRO;
			import com.artogrid.accountsystem.vo.AccountDTO;

			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			import spark.events.GridSelectionEvent;

			public var accountRO:AccountRO=AccountRO.getMe();
			private var willDeleteAccountDTO:AccountDTO;

			protected function dataGrid_creationCompleteHandler(event:FlexEvent):void {
				getAllAccountsResult.token=accountRO.getAllAccounts();
			}

			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void {
				var e:AccountDataEvent=new AccountDataEvent(AccountDataEvent.DATA_GRID_ITEM_CHANGE);
				if (event.selectionChange) {
					var rowIndex:int=event.selectionChange.rowIndex;
					if (rowIndex != -1) {
						e.data=getAllAccountsResult.lastResult.getItemAt(rowIndex) as AccountDTO;
					} else {
						e.data=new AccountDTO();
					}
				} else {
					e.data=new AccountDTO();
				}
				dispatchEvent(e);
			}

			private function clearFrom():void {
				var e:AccountDataEvent=new AccountDataEvent(AccountDataEvent.DATA_GRID_ITEM_CHANGE);
				e.data=new AccountDTO();
				dispatchEvent(e);
			}

			private function dateLabelFunction(item:Object, column:GridColumn):String {
				var date:Date=(item[column.dataField] as Date);
				return dateFormatter.format(date);
			}

			private function typeLabelFunction(item:Object, column:GridColumn):String {
				var accountType:String=(item[column.dataField] as String);
				return InitData.getOtherValueFromListByName(InitData.useTypes, "value", accountType, "name");
			}

			private function companyIdLabelFunction(item:Object, column:GridColumn):String {
				var companyId:String=(item[column.dataField] as String);
				return InitData.getOtherValueFromListByName((item["accountType"]=='1'?InitData.getAllCompanysResult.lastResult:InitData.getAllFinancialCompanysResult.lastResult), "id", companyId, "name");
			}

			protected function linkbar1_itemClickHandler(event:ItemClickEvent):void {
				var accountDTO:AccountDTO=dataGrid.selectedItem as AccountDTO;
				if (event.item == deleteBtn) {
					if (accountDTO != null) {
						MyAlert.showConfirm("确定要删除账号？", function(closeEvent:CloseEvent):void {
							if (closeEvent.detail == Alert.YES) {
								willDeleteAccountDTO=accountDTO;
								deleteAccountResult.token=accountRO.deleteAccount(accountDTO);
							}
						});
					} else {
						MyAlert.showAlert("请选择要删除的账号!");
					}
				} else if (event.item == refreshBtn) {
					dataGrid.scroller.verticalScrollBar.value=dataGrid.scroller.verticalScrollBar.minimum;
//					dataGrid.dataProvider.removeAll();
					getAllAccountsResult.token=accountRO.getAllAccounts();
					clearFrom();
				} else if (event.item == relationBtn) {
					if (accountDTO != null) {
						var accountRelationWindow:AccountRelationWindow=AccountRelationWindow.getMe(accountDTO);
						PopUpManager.addPopUp(accountRelationWindow, FlexGlobals.topLevelApplication as DisplayObject, true);
						PopUpManager.centerPopUp(accountRelationWindow);
					} else {
						MyAlert.showAlert("请选择要维护关系的账号!");
					}
				} else if (event.item == companyEditBtn) {
					var companyListWindow:CompanyWindow=CompanyWindow.getMe();
					PopUpManager.addPopUp(companyListWindow, FlexGlobals.topLevelApplication as DisplayObject, true);
					PopUpManager.centerPopUp(companyListWindow);
				}
			}

			protected function deleteAccountResult_resultHandler(event:ResultEvent):void {
				if (deleteAccountResult.lastResult == true && willDeleteAccountDTO != null) {
					dataGrid.dataProvider.removeItemAt(dataGrid.dataProvider.getItemIndex(willDeleteAccountDTO));
					clearFrom();
					MyAlert.showSuccess("数据删除完成！");
				}
				willDeleteAccountDTO=null;
			}

			protected function deleteAccountResult_faultHandler(event:FaultEvent):void {
				willDeleteAccountDTO=null;
			}

			private var isAddRefesh:Boolean=false;

			public function addRefesh():void {
				getAllAccountsResult.token=accountRO.getAllAccounts();
				isAddRefesh=true;
			}

			protected function getAllAccountsResult_resultHandler(event:ResultEvent):void {
				if (isAddRefesh) {
					dataGrid.selectedIndex=dataGrid.dataProvider.length - 1;
					dataGrid.scroller.verticalScrollBar.value=dataGrid.scroller.verticalScrollBar.maximum;
					isAddRefesh=false;
				}
			}

			protected function textInput_enterHandler(event:FlexEvent):void {
				if (textInput.text == null || textInput.text == "") {
					dataGrid.scroller.verticalScrollBar.value=dataGrid.scroller.verticalScrollBar.minimum;
					//					dataGrid.dataProvider.removeAll();
					getAllAccountsResult.token=accountRO.getAllAccounts();
					clearFrom();
				} else {
					getAllAccountsResult.token=accountRO.searchAccountsByKeyword(textInput.text);
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:CallResponder id="getAllAccountsResult" result="getAllAccountsResult_resultHandler(event)"/>
		<s:CallResponder id="deleteAccountResult" result="deleteAccountResult_resultHandler(event)" fault="deleteAccountResult_faultHandler(event)"/>
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="yyyy-MM-dd hh:mm:ss"/>
	</fx:Declarations>
	<s:DataGrid id="dataGrid" left="0" right="0" top="29" bottom="0" creationComplete="dataGrid_creationCompleteHandler(event)"
				requestedRowCount="4" selectionMode="singleRow" selectionChange="dataGrid_selectionChangeHandler(event)">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="displayName" headerText="显示名">
				</s:GridColumn>
				<s:GridColumn dataField="accountCode" headerText="代号">
				</s:GridColumn>
				<s:GridColumn dataField="username" headerText="登录名">
				</s:GridColumn>
				<s:GridColumn dataField="accountType" headerText="类型" labelFunction="typeLabelFunction">
				</s:GridColumn>
				<s:GridColumn dataField="companyId" headerText="公司" labelFunction="companyIdLabelFunction">
				</s:GridColumn>
				<s:GridColumn dataField="address" headerText="地址" visible="false">
				</s:GridColumn>
				<s:GridColumn dataField="email" headerText="邮箱" visible="false">
				</s:GridColumn>
				<s:GridColumn dataField="telephone" headerText="电话" visible="false">
				</s:GridColumn>
				<s:GridColumn dataField="mobile" headerText="手机" visible="false">
				</s:GridColumn>
				<s:GridColumn dataField="createTime" headerText="创建时间" labelFunction="dateLabelFunction">
				</s:GridColumn>
				<s:GridColumn dataField="modifyTime" headerText="修改时间" labelFunction="dateLabelFunction">
				</s:GridColumn>
				<s:GridColumn dataField="createBy" headerText="创建者">
				</s:GridColumn>
				<s:GridColumn dataField="modifyBy" headerText="修改者">
				</s:GridColumn>
				<s:GridColumn dataField="isForbidden" headerText="是否可用">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<fx:Script>
									<![CDATA[
										import com.artogrid.accountsystem.bl.InitData;

										[Bindable]
										[Embed(source="assets/disable.png")]
										private var disablePng:Class;
										
										[Bindable]
										[Embed(source="assets/enable.png")]
										private var enablePng:Class;
									]]>
								</fx:Script>
								<s:Image source="{data.isForbidden==InitData.disable?disablePng:enablePng}" horizontalCenter="0" verticalCenter="0"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
		<s:AsyncListView list="{getAllAccountsResult.lastResult}"/>
	</s:DataGrid>
	<mx:LinkBar right="155" top="0" iconField="icon" labelField="label" itemClick="linkbar1_itemClickHandler(event)" toolTipField="toolTip">
		<mx:dataProvider>
			<fx:Object icon="@Embed('assets/company.png')" label="公司" id="companyEditBtn" toolTip="经济公司维护"/>
			<fx:Object icon="@Embed('assets/relationship.png')" label="关系" id="relationBtn" toolTip="部门与角色关系维护"/>
			<fx:Object icon="@Embed('assets/delete.png')" label="删除" id="deleteBtn" toolTip="删除选中行"/>
			<fx:Object icon="@Embed('assets/refresh.png')" label="刷新" id="refreshBtn" toolTip="刷新列表"/>
		</mx:dataProvider>
	</mx:LinkBar>
	<s:TextInput id="textInput" right="1" top="4" width="150" enter="textInput_enterHandler(event)"/>
	<s:Image right="4" top="7" width="16" height="16" source="@Embed('assets/search.png')"/>
</s:Group>
