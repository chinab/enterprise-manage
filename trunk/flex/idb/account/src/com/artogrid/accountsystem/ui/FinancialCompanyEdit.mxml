<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:ro="com.artogrid.accountsystem.ro.*"
		 xmlns:vo="com.artogrid.accountsystem.vo.*">
	<fx:Script>
		<![CDATA[
			import com.artogrid.accountsystem.bl.InitData;
			import com.artogrid.accountsystem.controls.MyAlert;
			
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.TitleWindow;
			import spark.events.GridSelectionEvent;
			
			public var parentWin:TitleWindow;

			protected function saveFinancialCompanyResult_resultHandler(event:ResultEvent):void {
				if (saveFinancialCompanyResult.lastResult is FinancialCompanyDTO) {
					dataGrid.dataProvider.addItem(saveFinancialCompanyResult.lastResult);
					MyAlert.showSuccess("数据添加完成！");
					callLater(function():void {
						dataGrid.selectedItem=saveFinancialCompanyResult.lastResult;
						dataGrid.scroller.verticalScrollBar.value=dataGrid.scroller.verticalScrollBar.maximum;
					});
				} else {
					MyAlert.showAlert("添加失败");
				}
			}

			protected function updateFinancialCompanyResult_resultHandler(event:ResultEvent):void {
				if (!(updateFinancialCompanyResult.lastResult is FinancialCompanyDTO)) {
					MyAlert.showAlert("更新失败");
				} else {
					MyAlert.showSuccess("数据更新完成！");
				}
			}

			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void {
				if (event.selectionChange) {
					var rowIndex:int=event.selectionChange.rowIndex;
					if (rowIndex != -1) {
						financialCompanyDTO=InitData.getAllFinancialCompanysResult.lastResult.getItemAt(rowIndex) as FinancialCompanyDTO;
					} else {
						financialCompanyDTO=new FinancialCompanyDTO();
					}
				} else {
					financialCompanyDTO=new FinancialCompanyDTO();
				}
			}

			protected function closeBtn_clickHandler(event:MouseEvent):void {
				PopUpManager.removePopUp(parentWin);
			}

			protected function deleteBtn_clickHandler(event:MouseEvent):void {
				if (dataGrid.selectedIndex != -1) {
					MyAlert.showConfirm("确定要删除公司？", function(closeEvent:CloseEvent):void {
						if (closeEvent.detail == Alert.YES) {
							var financialCompanyDTO:FinancialCompanyDTO=(dataGrid.selectedItem as FinancialCompanyDTO);
							if (financialCompanyDTO != null) {
								deleteFinancialCompanyByIdResult.token=financialCompanyRO.deleteFinancialCompanyById(financialCompanyDTO.id);
							}
						}
					});
				} else {
					MyAlert.showAlert("请选择你要删除的数据");
				}
			}

			protected function deleteFinancialCompanyByIdResult_resultHandler(event:ResultEvent):void {
				if (deleteFinancialCompanyByIdResult.lastResult == true) {
					dataGrid.dataProvider.removeItemAt(dataGrid.dataProvider.getItemIndex(financialCompanyDTO));
					financialCompanyDTO=new FinancialCompanyDTO();
					MyAlert.showSuccess("数据删除完成！");
				} else {
					MyAlert.showAlert("无法删除公司，存在账号属于此公司！");
				}
			}

			protected function updateButton_clickHandler(event:MouseEvent):void {
				//如果已为 FinancialCompanyDTO 启用了数据管理并且 saveFinancialCompany 用作 create 函数，请取消对下行的注释。
				// var financialCompanyDTO:FinancialCompanyDTO = new FinancialCompanyDTO();
				financialCompanyDTO.nameEn=nameEnTextInput.text;
				financialCompanyDTO.cityName=cityNameTextInput.text;
				financialCompanyDTO.code=codeTextInput.text;
				financialCompanyDTO.city=cityTextInput.text;
				financialCompanyDTO.bankType=bankTypeTextInput.text;
				financialCompanyDTO.description=descriptionTextInput.text;
				financialCompanyDTO.name=nameTextInput.text;
				financialCompanyDTO.fullName=fullNameTextInput.text;
				financialCompanyDTO.fullNameEn=fullNameEnTextInput.text;

				updateFinancialCompanyResult.token=financialCompanyRO.updateFinancialCompany(financialCompanyDTO);
			}

			protected function addButton_clickHandler(event:MouseEvent):void {
				//如果已为 FinancialCompanyDTO 启用了数据管理并且 saveFinancialCompany 用作 create 函数，请取消对下行的注释。
				var financialCompanyDTONew:FinancialCompanyDTO=new FinancialCompanyDTO();
				financialCompanyDTONew.nameEn=nameEnTextInput.text;
				financialCompanyDTONew.cityName=cityNameTextInput.text;
				financialCompanyDTONew.code=codeTextInput.text;
				financialCompanyDTONew.city=cityTextInput.text;
				financialCompanyDTONew.bankType=bankTypeTextInput.text;
				financialCompanyDTONew.description=descriptionTextInput.text;
				financialCompanyDTONew.name=nameTextInput.text;
				financialCompanyDTONew.fullName=fullNameTextInput.text;
				financialCompanyDTONew.fullNameEn=fullNameEnTextInput.text;

				saveFinancialCompanyResult.token=financialCompanyRO.saveFinancialCompany(financialCompanyDTONew);
			}

			private function dateLabelFunction(item:Object, column:GridColumn):String {
				var date:Date=(item[column.dataField] as Date);
				return dateFormatter.format(date);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<ro:FinancialCompanyRO id="financialCompanyRO" fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)" showBusyCursor="true"/>
		<vo:FinancialCompanyDTO id="financialCompanyDTO"/>
		<s:CallResponder id="saveFinancialCompanyResult" result="saveFinancialCompanyResult_resultHandler(event)"/>
		<s:CallResponder id="updateFinancialCompanyResult" result="updateFinancialCompanyResult_resultHandler(event)"/>
		<s:CallResponder id="deleteFinancialCompanyByIdResult" result="deleteFinancialCompanyByIdResult_resultHandler(event)"/>
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="yyyy-MM-dd hh:mm:ss"/>
	</fx:Declarations>
	<s:DataGrid id="dataGrid" left="10" right="10" top="29" bottom="260" requestedRowCount="4"
				selectionChange="dataGrid_selectionChangeHandler(event)">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="name" headerText="name">
				</s:GridColumn>
				<s:GridColumn dataField="nameEn" headerText="nameEn">
				</s:GridColumn>
				<s:GridColumn dataField="fullName" headerText="fullName">
				</s:GridColumn>
				<s:GridColumn dataField="fullNameEn" headerText="fullNameEn" width="80">
				</s:GridColumn>
				<s:GridColumn dataField="code" headerText="code">
				</s:GridColumn>
				<s:GridColumn dataField="pinyin" headerText="pinyin" width="80">
				</s:GridColumn>
				<s:GridColumn dataField="pinyinFull" headerText="pinyinFull" width="80">
				</s:GridColumn>
				<s:GridColumn dataField="bankType" headerText="bankType">
				</s:GridColumn>
				<s:GridColumn dataField="cityName" headerText="cityName">
				</s:GridColumn>
				<s:GridColumn dataField="city" headerText="city">
				</s:GridColumn>
				<s:GridColumn dataField="createTime" headerText="createTime" labelFunction="dateLabelFunction">
				</s:GridColumn>
				<s:GridColumn dataField="description" headerText="description">
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
		<s:AsyncListView list="{InitData.getAllFinancialCompanysResult.lastResult}"/>

	</s:DataGrid>
	<s:HGroup x="0" bottom="50" width="888" height="203">
		<s:Form>
			<s:FormItem label="Name">
				<s:TextInput id="nameTextInput" width="150" text="{financialCompanyDTO.name}"/>
			</s:FormItem>
			<s:FormItem label="FullNameEn">
				<s:TextArea id="fullNameEnTextInput" width="150" height="70" text="{financialCompanyDTO.fullNameEn}"/>
			</s:FormItem>
			<s:FormItem label="City">
				<s:TextInput id="cityTextInput" width="150" text="{financialCompanyDTO.city}"/>
			</s:FormItem>
		</s:Form>
		<s:Form>
			<s:FormItem label="NameEn">
				<s:TextInput id="nameEnTextInput" width="150" text="{financialCompanyDTO.nameEn}"/>
			</s:FormItem>
			<s:FormItem label="Code">
				<s:TextInput id="codeTextInput" width="150" text="{financialCompanyDTO.code}"/>
			</s:FormItem>
			<s:FormItem label="CityName">
				<s:TextInput id="cityNameTextInput" width="150" text="{financialCompanyDTO.cityName}"/>
			</s:FormItem>
		</s:Form>
		<s:Form>
			<s:FormItem label="FullName">
				<s:TextInput id="fullNameTextInput" width="180" text="{financialCompanyDTO.fullName}"/>
			</s:FormItem>
			<s:FormItem label="BankType">
				<s:TextInput id="bankTypeTextInput" width="150" text="{financialCompanyDTO.bankType}"/>
			</s:FormItem>
			<s:FormItem label="Description">
				<s:TextArea id="descriptionTextInput" width="150" height="70" text="{financialCompanyDTO.description}"/>
			</s:FormItem>

		</s:Form>
	</s:HGroup>
	<s:Button id="updateButton" bottom="20" label="更新" click="updateButton_clickHandler(event)" horizontalCenter="0" enabled="{financialCompanyDTO.id!=null}"/>
	<s:Button id="addButton" bottom="20" label="添加" click="addButton_clickHandler(event)" horizontalCenter="-90"/>
	<s:Button bottom="20" label="关闭" horizontalCenter="90" id="closeBtn" click="closeBtn_clickHandler(event)"/>
	<mx:LinkButton id="deleteBtn" right="10" top="0" label="删除" click="deleteBtn_clickHandler(event)" icon="@Embed('assets/delete.png')"
				   toolTip="删除部门和角色的关系"/>
</s:Group>
