<?xml version="1.0" encoding="utf-8"?>
<!--
 The main application file for the Dashboard demo app.
 Loads the layout XML and creates PodLayoutManagers.
-->
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml"
	minWidth="500" minHeight="400"
	width="100%" height="100%"
	backgroundColor="#ffffff"
	layout="absolute"
	applicationComplete="onApplicationComplete()">
	<mx:Style source="/assets/styles.css" />
	<mx:Script>
		<![CDATA[
			import com.esria.samples.dashboard.view.ColumnChartContent;
			import com.esria.samples.dashboard.view.LineChartContent;
			import com.esria.samples.dashboard.view.AmchartsContent;
			import com.esria.samples.dashboard.view.TabContent;
			import com.esria.samples.dashboard.view.GridContent;
			import com.esria.samples.dashboard.view.GaugesChartContent;
			import com.esria.samples.dashboard.events.LayoutChangeEvent;
			import com.esria.samples.dashboard.managers.PodLayoutManager;
			import com.esria.samples.dashboard.managers.StateManager;
			import com.esria.samples.dashboard.view.ChartContent;
			import com.esria.samples.dashboard.view.FormContent;
			import com.esria.samples.dashboard.view.ListContent;
			import com.esria.samples.dashboard.view.PieChartContent;
			import com.esria.samples.dashboard.view.Pod;
			import com.esria.samples.dashboard.view.PodContentBase;
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			// Stores the xml data keyed off of a PodLayoutManager.
			private var podDataDictionary:Dictionary = new Dictionary();
			
			// Stores PodLayoutManagers keyed off of a Pod.
			// Used for podLayoutManager calls after pods have been created for the first time.
			// Also, used for look-ups when saving pod content ViewStack changes.
			private var podHash:Object = new Object();
			
			private function onApplicationComplete():void
			{
				// Load pods.xml, which contains the pod layout.
				var httpService:HTTPService = new HTTPService();
				httpService.url = "data/pods.xml";
				httpService.resultFormat = "e4x";
				httpService.addEventListener(FaultEvent.FAULT, onFaultHttpService);
				httpService.addEventListener(ResultEvent.RESULT, onResultHttpService);
				httpService.send();
			}
			
			private function onFaultHttpService(e:FaultEvent):void
			{
				Alert.show("加载资源'/spm/getPTXMLOwn.action'失败！查看是否已登录,或登录信息过期.");
			}
			
			private function onResultHttpService(e:ResultEvent):void
			{
				var viewXML:XML = XML(e.result);
				if(viewXML.pod==null || viewXML.pod.length()<1){
					return ;
				}
				
				var containerWindowManagerHash:Object = new Object();
				// Create a canvas for each view node.
				var canvas:Canvas = new Canvas();
				// PodLayoutManager handles resize and should prevent the need for
				// scroll bars so turn them off so they aren't visible during resizes.
				canvas.horizontalScrollPolicy = "off";
				canvas.verticalScrollPolicy = "off";
				canvas.label = viewXML.@label;
				canvas.percentWidth = 100;
				canvas.percentHeight = 100;
				viewStack.addChild(canvas);
				
				// Create a manager for each view.
				var manager:PodLayoutManager = new PodLayoutManager();
				manager.container = canvas;
				manager.id = "view1";
				manager.addEventListener(LayoutChangeEvent.UPDATE, StateManager.setPodLayout);
				// Store the pod xml data. Used when view is first made visible.
				podDataDictionary[manager] = viewXML.pod;
				
				addPods(manager);
			}
			
			// Adds the pods to a view.
			private function addPods(manager:PodLayoutManager):void
			{
				// Loop through the pod nodes for each view node.
				var podXMLList:XMLList = podDataDictionary[manager];
				var podLen:Number = podXMLList.length();
				var unsavedPodCount:Number = 0;
				for (var j:Number = 0; j < podLen; j++)
				{
					// Figure out which type of pod content to use.
					var podContent:PodContentBase = null;
					if (podXMLList[j].@type == "chart")
						podContent = new ChartContent();
					else if (podXMLList[j].@type == "form")
						podContent = new FormContent();
					else if (podXMLList[j].@type == "list")
						podContent = new ListContent();
					else if (podXMLList[j].@type == "pieChart")
						podContent = new PieChartContent();
					else if (podXMLList[j].@type == "gaugesChart")
						podContent = new GaugesChartContent();
					else if (podXMLList[j].@type == "grid")
						podContent = new GridContent();
					else if (podXMLList[j].@type == "tab")
						podContent = new TabContent();
					else if (podXMLList[j].@type == "amcharts")
						podContent = new AmchartsContent();
					else if (podXMLList[j].@type == "lineChart")
						podContent = new LineChartContent();
					else if (podXMLList[j].@type == "columnChart")
						podContent = new ColumnChartContent();
					
					if (podContent != null)
					{
						var viewId:String = manager.id;
						var podId:String = podXMLList[j].@id;
						
						// Get the saved value for the pod content viewStack.
						if (StateManager.getPodViewIndex(viewId, podId) != -1)
							podXMLList[j].@selectedViewIndex = StateManager.getPodViewIndex(viewId, podId);
						
						podContent.properties = podXMLList[j];
						var pod:Pod = new Pod();
						pod.id = podId;
						pod.title = podXMLList[j].@title;
						pod.addChild(podContent);
						var index:Number;
						
						if (StateManager.isPodMinimized(viewId, podId))
						{
							index = StateManager.getMinimizedPodIndex(viewId, podId);
							manager.addMinimizedItemAt(pod, index);
						}
						else
						{
							index = StateManager.getPodIndex(viewId, podId);
							
							// If the index hasn't been saved move the pod to the last position.
							if (index == -1)
							{
								index = podLen + unsavedPodCount;
								unsavedPodCount += 1;
							}
							
							manager.addItemAt(pod, index, StateManager.isPodMaximized(viewId, podId));
						}
						
						pod.addEventListener(IndexChangedEvent.CHANGE, onChangePodView);
						
						podHash[pod] = manager;
					}
				}
				
				// Delete the saved data.
				delete podDataDictionary[manager];
				
				// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
				pod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
			}
			
			// Pod has been created so update the respective PodLayoutManager.
			private function onCreationCompletePod(e:FlexEvent):void
			{
				e.currentTarget.removeEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				var manager:PodLayoutManager = PodLayoutManager(podHash[e.currentTarget]);
				manager.removeNullItems();
				manager.updateLayout(false);
			}
			
			// Saves the pod content ViewStack state.
			private function onChangePodView(e:IndexChangedEvent):void
			{
				var pod:Pod = Pod(e.currentTarget);
				var viewId:String = PodLayoutManager(podHash[pod]).id;
				StateManager.setPodViewIndex(viewId, pod.id, e.newIndex);
			}
		]]>
	</mx:Script>
	<mx:ViewStack paddingRight="5" paddingBottom="5" paddingTop="5" paddingLeft="5" id="viewStack" width="100%" height="100%" horizontalCenter="0" verticalCenter="0"/>
</mx:Application>
