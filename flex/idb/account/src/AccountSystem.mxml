<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:services="com.artogrid.services.*"
			   xmlns:ui="com.artogrid.accountsystem.ui.*"
			   xmlns:services2="services.*"
			   minWidth="955" minHeight="600" preinitialize="InitData.init();">
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace services "com.artogrid.services.*";
		@namespace ui "com.artogrid.accountsystem.ui.*";
		mx|ToolTip{
			fontSize:12px;
		}
		
		s|Application{
			fontFamily:"宋体";
			fontSize: 12px;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.artogrid.accountsystem.bl.InitData;
			import com.artogrid.accountsystem.controls.MyAlert;
			import com.artogrid.accountsystem.events.AccountDataEvent;
			import com.artogrid.accountsystem.ui.OnlineUsersWindow;
			import com.artogrid.accountsystem.ui.ServerConfigWindow;
			import com.artogrid.accountsystem.vo.AccountDTO;
			import com.artogrid.accountsystem.vo.UserDTO;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.TitleWindow;
			import spark.events.GridSelectionEvent;

			[Bindable]
			private var _userDTO:UserDTO;

			protected function accountlist1_creationCompleteHandler(event:FlexEvent):void {
				accountList.addEventListener(AccountDataEvent.DATA_GRID_ITEM_CHANGE, listSelectionChange);
				accountEditFrom.addEventListener(AccountDataEvent.ADD_NEW_ACCOUNT_TO_LIST, addNewAccountToListHandler);
			}

			private function addNewAccountToListHandler(event:AccountDataEvent):void {
//				accountList.dataGrid.dataProvider.addItemAt(accountEditFrom.accountDTO, 0);
//				accountList.dataGrid.selectedItem=accountEditFrom.accountDTO;
//				accountList.dataGrid.scroller.verticalScrollBar.value=accountList.dataGrid.scroller.verticalScrollBar.minimum;
				accountList.addRefesh();
			}

			private function listSelectionChange(event:AccountDataEvent):void {
				accountEditFrom.accountDTO=event.data as AccountDTO;
			}

			private function loginFunction(userDTO:UserDTO):void {
				currentState="LOGINED_STATE";
				_userDTO=userDTO;
			}

			protected function logoutBtn_clickHandler(event:MouseEvent):void {
				MyAlert.showConfirm("是否要登出程序？", function(event:CloseEvent):void {
					if (event.detail == Alert.YES) {
						currentState="NOT_LOGINED_STATE";
					}
				});
			}

			protected function configBtn_clickHandler(event:MouseEvent):void {
				PopUpManager.addPopUp(ServerConfigWindow.instance, this);
				PopUpManager.centerPopUp(ServerConfigWindow.instance);
			}

			protected function onlineBtn_clickHandler(event:MouseEvent):void {
				OnlineUsersWindow.instance.loadData();
				PopUpManager.addPopUp(OnlineUsersWindow.instance, this);
				PopUpManager.centerPopUp(OnlineUsersWindow.instance);
			}
			
			protected function button_clickHandler(event:MouseEvent):void
			{
				saveLogResult.token = logRO.saveLog();
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="NOT_LOGINED_STATE"/>
		<s:State name="LOGINED_STATE"/>
	</s:states>
	<fx:Declarations>
		<s:CallResponder id="saveLogResult"/>
		<services2:LogRO id="logRO"
						 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
						 showBusyCursor="true"/>
	</fx:Declarations>
	<ui:LoginPanel includeIn="NOT_LOGINED_STATE" horizontalCenter="0" verticalCenter="0" loginFunction="{loginFunction}"/>
	<s:VGroup includeIn="LOGINED_STATE" left="10" right="10" top="10" bottom="10" gap="0">
		<s:HGroup verticalAlign="middle">
			<s:Label text="当前用户：{_userDTO.username}"/>
			<mx:LinkButton id="logoutBtn" label="登出" icon="@Embed('assets/logout.png')" click="logoutBtn_clickHandler(event)"/>
			<mx:LinkButton id="configBtn" label="服务器配置" icon="@Embed('assets/settings.png')" click="configBtn_clickHandler(event)"/>
			<mx:LinkButton id="onlineBtn" label="在线用户" icon="@Embed('assets/online.png')" click="onlineBtn_clickHandler(event)"/>
		</s:HGroup>
		<ui:AccountList id="accountList" width="100%" height="100%" creationComplete="accountlist1_creationCompleteHandler(event)">
		</ui:AccountList>
		<ui:AccountEditFrom id="accountEditFrom" width="100%">
		</ui:AccountEditFrom>
	</s:VGroup>
	<s:Button id="button" includeIn="NOT_LOGINED_STATE" x="717" y="264" label="logTest"
			  click="button_clickHandler(event)"/>
</s:Application>
